AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy ASG for jenkins slaves with given OS'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SlavesLabel:
    Description: Jenkins label for the slaves (Should you 1 abel per ASG).
    Type: 'String'
  DockerRegistry:
    Description: Docker registry to pull Docker images.
    Type: 'String'
  DockerUser:
    Description: User name to login the given Docker registry.
    Type: 'String'
  DockerPassword:
    Description: Password to login the given Docker registry.
    Type: 'String'
  SlavesAmiId:
    Type: AWS::EC2::Image::Id
    Description: This image is used for Jenkins slaves
  SlavesOS:
    Description: OS for the slaves
    Type: 'String'
    AllowedValues:
      - linux
      - windows
  SlavesInstanceType:
    Description: EC2 instance type
    Type: 'String'
  SlavesSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet to deploy Jenkins master
  SlavesAZ:
    Type: String
    Description: AZs to deploy asg
  VPCId:
    Description: VPC id of the stack
    Type: AWS::EC2::VPC::Id
  JenkinsMasterURL:
    Type: String
    Description: URL of the Jenkins master
  JenkinsQueueMetricName:
    Type: String
    Description: Jenkins queue Cloud Watch metric name
  JenkinsSlavesASGName:
    Type: String
    Description: ASG name
  JenkinsSlaveDockerTag:
    Description: Docker tag of image for Linux slaves
    Type: String
  NFSServerIP:
    Description: NFS server ip, used to mount ccache and references volumes
    Type: String
# set Default value to be able to skip the argument
    Default: not-needed
  SMBServerIP:
    Description: NFS server ip, used to mount ccache and references volumes
    Type: String
# set Default value to be able to skip the argument
    Default: not-needed
  CWLogsGroupName:
    Type: String
  IAMProfileARN:
    Type: String

Conditions:
  IfLinux:
    !Equals [ !Ref SlavesOS, "linux" ]
  IfWindows:
    !Equals [ !Ref SlavesOS, "windows" ]

Resources:
  JenkinsSlavesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'secg-${AWS::StackName}-jenkinsslaves-${SlavesOS}'
      GroupDescription: Enable access to slaves
      VpcId: !Ref VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3389
        ToPort: 3389
        CidrIp: 0.0.0.0/0

  JenkinsSlavesLTLin:
    Type: "AWS::EC2::LaunchTemplate"
    Condition: 'IfLinux'
    Properties:
      LaunchTemplateName: !Sub 'lt-${AWS::StackName}-jenkinsslaves-${SlavesOS}'
      LaunchTemplateData:
        InstanceType: !Ref 'SlavesInstanceType'
        IamInstanceProfile:
          Arn: !Ref IAMProfileARN
        KeyName: !Ref 'KeyName'
        SecurityGroupIds:
          - !GetAtt JenkinsSlavesSG.GroupId
        ImageId: !Ref SlavesAmiId
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              MAX_TRIES=5
              function dockerIsReady() {
                docker ps > /dev/null 2>&1
              }
              until dockerIsReady || [ $MAX_TRIES -eq 0 ]; do
                echo "Waiting for docker service to start, $((MAX_TRIES--)) remaining attempts..."
                sleep 5
              done

              docker volume create --driver local --opt type=nfs --opt o=addr=${NFSServerIP},noac,noatime,async,rw,nolock,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport --opt device=:/ccache container-ccache
              docker volume create --driver local --opt type=nfs --opt o=addr=${NFSServerIP},noatime,async,rw,nolock,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport --opt device=:/references reference-repos
              # We must have all needed images pulled in the AMI to make builds faster and cheaper
              # docker login -u ${DockerUser} -p ${DockerPassword} ${DockerRegistry}

              # Instance name
              INSTANCEID="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
              # Run jenkins slave container
              docker run -d \
                --name $INSTANCEID \
                -h $INSTANCEID \
                -e "JENKINS_URL=${JenkinsMasterURL}" \
                -e "JENKINS_LABELS=${SlavesLabel}" \
                -e "NETNAME=isolated-" \
                -v container-ccache:/var/cache/ccache \
                -v reference-repos:/home/build/references \
                -v /var/run/docker.sock:/var/run/docker.sock \
                --log-driver=awslogs \
                --log-opt awslogs-region=us-east-1 \
                --log-opt awslogs-group=${CWLogsGroupName} \
                --log-opt awslogs-create-group=true \
                --log-opt tag=$INSTANCEID \
                ${DockerRegistry}/navico-docker/docker-ubuntu-pipeline-agent:${JenkinsSlaveDockerTag}

  JenkinsSlavesLTWin:
    Type: "AWS::EC2::LaunchTemplate"
    Condition: 'IfWindows'
    Properties:
      LaunchTemplateName: !Sub 'lt-${AWS::StackName}-jenkinsslaves-${SlavesOS}'
      LaunchTemplateData:
        InstanceType: !Ref 'SlavesInstanceType'
        IamInstanceProfile:
          Arn: !Ref IAMProfileARN
        KeyName: !Ref 'KeyName'
        SecurityGroupIds:
          - !GetAtt JenkinsSlavesSG.GroupId
        ImageId: !Ref SlavesAmiId
        # BlockDeviceMappings: - Configured in AMI with PACKER
        UserData:
          Fn::Base64: !Sub |
                <powershell>
                $INSTANCEID = (new-object Net.WebClient).DownloadString("http://169.254.169.254/latest/meta-data/instance-id")
                docker run -d --rm `
                  --name $INSTANCEID `
                  -h $INSTANCEID `
                  --storage-opt "size=100GB" `
                  -e "JENKINS_URL=${JenkinsMasterURL}" `
                  -e "JENKINS_LABELS=${SlavesLabel}" `
                  -e "SMB_SERVER=${SMBServerIP}" `
                  --log-driver=awslogs `
                  --log-opt awslogs-region=us-east-1 `
                  --log-opt awslogs-group=${CWLogsGroupName} `
                  --log-opt awslogs-create-group=true `
                  --log-opt tag=$INSTANCEID `
                  ${DockerRegistry}/navico-docker/docker-navico-windows-sdk:${JenkinsSlaveDockerTag}
                </powershell>


  JenkinsSlavesASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref JenkinsSlavesASGName
      Tags:
        - Key: Name
          Value: ec2-asg-rnd-prd-jenkinsslave-use1
          PropagateAtLaunch: "true"
      VPCZoneIdentifier: !Ref SlavesSubnets
      AvailabilityZones:
        - !Ref SlavesAZ
      Cooldown: !If [IfLinux, 600, 600 ]
      HealthCheckGracePeriod: 300
      # DesiredCapacity: 0
      MaxSize: !If [IfLinux, 15, 4 ]
      MinSize: 0
      LaunchTemplate:
        LaunchTemplateId: !If [IfLinux, !Ref 'JenkinsSlavesLTLin', !Ref 'JenkinsSlavesLTWin' ]
        Version: !If [IfLinux, !GetAtt JenkinsSlavesLTLin.LatestVersionNumber, !GetAtt JenkinsSlavesLTWin.LatestVersionNumber]
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMaxSize
            - GroupMinSize
            - GroupDesiredCapacity
            - GroupTerminatingInstances
            - GroupPendingInstances
            - GroupTotalInstances
            - GroupInServiceInstances
            - GroupStandbyInstances

  JenkinsQueueSizeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'alarm-${AWS::StackName}-jenkinsqueue-${SlavesOS}'
      AlarmDescription: Scale-up if Jenkins masterr require more Slaves this ASG can provide
      MetricName: !Ref JenkinsQueueMetricName
      Namespace: BuildEnv/Jenkins
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      TreatMissingData: notBreaching
      AlarmActions: [ !If [IfLinux, !Ref 'JenkinsSlavesLinASGScaleUpPolicy', !Ref 'JenkinsSlavesWinASGScaleUpPolicy'] ]
      Dimensions:
      # Defined in aws_autoscale_manager.py
      - Name: JobsInQueue
        Value: JOBS
      ComparisonOperator: GreaterThanThreshold

  JenkinsSlavesLinASGScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'JenkinsSlavesASG'
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 2
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 2
          MetricIntervalUpperBound: 5
          ScalingAdjustment: 3
        - MetricIntervalLowerBound: 5
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 5
        - MetricIntervalLowerBound: 10
          ScalingAdjustment: 9

  JenkinsSlavesWinASGScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ExactCapacity
      AutoScalingGroupName: !Ref 'JenkinsSlavesASG'
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 4
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 4
          MetricIntervalUpperBound: 7
          ScalingAdjustment: 2
        - MetricIntervalLowerBound: 7
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 3
        - MetricIntervalLowerBound: 10
          ScalingAdjustment: 4

Outputs:
  JenkinsQueueMetricName:
    Value: !Ref JenkinsQueueMetricName
  JenkinsSlavesASGName:
    Value: !Ref JenkinsSlavesASGName
  IAMProfileARN:
    Value: !Ref IAMProfileARN
